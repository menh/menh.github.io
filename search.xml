<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PAT-1014_Waiting_in_Line</title>
    <url>/2020/02/24/PAT-1014-Waiting-in-Line/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805498207911936" target="_blank" rel="noopener">1014 Waiting in Line</a></p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>一队列人到银行办理业务, 每个人办理业务时长不同, 银行有几个服务窗口，每个服务窗口允许固定的人数排队，排满之后，后面的人只能等着在办理的人结束，才能去排队。<br>哪个队列走就可以去排那个队列，银行的营业时间是8:00-17:000</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>从题意中分析到，这道题就是一个排队入队出队问题，问题的难点怎样确定去排哪个队</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>用一个结构体来记录每个窗口的信息<br>ST_WINDOW{<br>    int iTopFinishTime;<br>    int iTotalTime;<br>    queue<int> quPeopleId;<br>};<br>iTopFinishTime 表示队列中最顶端的人何时服务结束<br>iTotalTime 表示这个队列总共服务的时长<br>quPeopleId 表示当前队列中的人<br>这样每次只需要找到当前所有窗口最小的iTopFinishTime，就是下次可排队的窗口</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST_WINDOW</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> iTopFinishTime;</span><br><span class="line">    <span class="keyword">int</span> iTotalTime;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; quPeopleId;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iN, iM, iK, iQ;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; iN &gt;&gt; iM &gt;&gt; iK &gt;&gt; iQ;</span><br><span class="line">    ST_WINDOW stWindow[iN];</span><br><span class="line">    <span class="keyword">int</span> szProcessTime[iK]; <span class="comment">//每个客户处理的时间</span></span><br><span class="line">    <span class="keyword">int</span> szBeginTime[iK];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> iIndex = <span class="number">0</span>; iIndex &lt; iK; iIndex ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; szProcessTime[iIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> iProcessingNum = <span class="built_in">min</span>(iN * iM, iK);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> iIndex = <span class="number">0</span> ; iIndex &lt; iProcessingNum; iIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        stWindow[iIndex % iN].quPeopleId.push(iIndex);</span><br><span class="line">        <span class="keyword">if</span>(iIndex &lt; iN)</span><br><span class="line">        &#123;</span><br><span class="line">            stWindow[iIndex % iN].iTopFinishTime = szProcessTime[iIndex];</span><br><span class="line">            stWindow[iIndex % iN].iTotalTime = szProcessTime[iIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            stWindow[iIndex % iN].iTotalTime = stWindow[iIndex % iN].iTotalTime + szProcessTime[iIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        szBeginTime[iIndex] = stWindow[iIndex % iN].iTotalTime ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> iIndex = iProcessingNum; iIndex &lt; iK; iIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> iMinTopFinishTimeWindow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> jIndex = <span class="number">1</span>; jIndex &lt; iN; jIndex ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(stWindow[iMinTopFinishTimeWindow].iTopFinishTime &gt; stWindow[jIndex].iTopFinishTime)</span><br><span class="line">            &#123;</span><br><span class="line">                iMinTopFinishTimeWindow = jIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stWindow[iMinTopFinishTimeWindow].quPeopleId.pop();</span><br><span class="line">        stWindow[iMinTopFinishTimeWindow].quPeopleId.push(iIndex);</span><br><span class="line">        <span class="keyword">int</span> iToProcePeopleId = stWindow[iMinTopFinishTimeWindow].quPeopleId.front();</span><br><span class="line">        stWindow[iMinTopFinishTimeWindow].iTopFinishTime += szProcessTime[iToProcePeopleId];</span><br><span class="line">        stWindow[iMinTopFinishTimeWindow].iTotalTime += szProcessTime[iIndex];</span><br><span class="line">        szBeginTime[iIndex] = stWindow[iMinTopFinishTimeWindow].iTotalTime ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> iQueryId;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> iIndex = <span class="number">0</span>; iIndex &lt; iQ; iIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; iQueryId;</span><br><span class="line">        <span class="keyword">if</span>(szBeginTime[iQueryId - <span class="number">1</span>] - szProcessTime[iQueryId - <span class="number">1</span>]&gt;= <span class="number">540</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sorry"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02d:%02d"</span>, <span class="number">8</span> + (szBeginTime[iQueryId - <span class="number">1</span>]) / <span class="number">60</span> , (szBeginTime[iQueryId - <span class="number">1</span>] ) % <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(iIndex&lt;iQ<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>PAT-1010_Radix</title>
    <url>/2020/02/24/PAT-1010-Radix/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536" target="_blank" rel="noopener">1010 Radix</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这题题目很好理解,就是做起来真难受,各种部分正确<br>总体思路就是使用二分法找进制,按照进制转换成数字.<br>但是中间有很多需要注意的地方</p>
<p>最重要的是</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">str2RadixNum</span><span class="params">(<span class="built_in">string</span> strNum, <span class="keyword">long</span> <span class="keyword">long</span> llRadix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> llNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> pT = strNum.<span class="built_in">begin</span>(); pT != strNum.<span class="built_in">end</span>(); pT++)</span><br><span class="line">    &#123;</span><br><span class="line">        llNum = llNum * llRadix + (<span class="built_in">isdigit</span>(*pT) ? (*pT - <span class="string">'0'</span>) : (*pT - <span class="string">'a'</span> + <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> llNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">findNumRadix</span><span class="params">(<span class="built_in">string</span> strNum, <span class="keyword">long</span> <span class="keyword">long</span> llTagNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> strMaxChar = *max_element(strNum.<span class="built_in">begin</span>(), strNum.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> llLow = (<span class="built_in">isdigit</span>(strMaxChar) ? strMaxChar - <span class="string">'0'</span> : strMaxChar - <span class="string">'a'</span> + <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> llHigh = <span class="built_in">max</span>(llLow,llTagNum);</span><br><span class="line">    <span class="keyword">while</span>(llLow &lt;= llHigh)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> llMedium = (llLow + llHigh) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> llMediumRadixNum = str2RadixNum(strNum, llMedium);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(llMediumRadixNum &lt; <span class="number">0</span> || llMediumRadixNum &gt; llTagNum)</span><br><span class="line">        &#123;</span><br><span class="line">            llHigh = llMedium - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(llMediumRadixNum &lt; llTagNum)</span><br><span class="line">        &#123;</span><br><span class="line">            llLow = llMedium + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> llMedium;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> strN1;</span><br><span class="line">    <span class="built_in">string</span> strN2;</span><br><span class="line">    <span class="keyword">int</span> iTag;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> llRadix;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt; strN1 &gt;&gt; strN2 &gt;&gt; iTag &gt;&gt; llRadix)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> llTagNum = iTag == <span class="number">1</span> ? str2RadixNum(strN1, llRadix) : str2RadixNum(strN2, llRadix);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> llResult = iTag == <span class="number">1</span> ? findNumRadix(strN2, llTagNum) : findNumRadix(strN1, llTagNum);</span><br><span class="line">        llResult == <span class="number">-1</span> ? <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt;<span class="built_in">endl</span> : <span class="built_in">cout</span>&lt;&lt; llResult &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>PAT-1015_Reversible_Primes</title>
    <url>/2020/02/22/PAT-1015-Reversible-Primes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805495863296000" target="_blank" rel="noopener">1015 Reversible Primes</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>按照题目来判断原数是不是质数，数位逆转后再判断是不是质数</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> iNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(iNum &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(iNum == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> iHalf = iNum / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> iDivisorCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= iHalf; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(iNum % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iReverse = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(iNum != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        iReverse = iReverse * iD + iNum % iD;</span><br><span class="line">        iNum = iNum / iD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iReverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iN, iD;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt; iN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(iN &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; iD;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(iN) == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(reverse(iN, iD)) == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; <span class="string">"No"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Django-数据迁移问题</title>
    <url>/2020/02/21/Django-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol>
<li><p>清空数据表<br>python manage.py flush</p>
</li>
<li><p>使用Django框架的倒入导出<br>python manage.py dumpdata [APP_NAME] &gt; [EXPOER_FILE_NAME]<br>python manage.py loaddata [EXPOER_FILE_NAME]<br>不指定应用名称则会导出所有数据表，包括一些系统数据表<br>所以在导出时尽量只指定有关业务应用的名称<br>例如:<br>有personnels和customers两个应用要导出数据时<br>python manage.py dumpdata personnels customers &gt; data.json</p>
</li>
</ol>
<p>导入数据<br>python manage.py loaddata data.json</p>
<ol start="2">
<li>当使用安全删除策略时可能面临的导出问题<br>若业务删除操作写的很标准，关联数据都可以逻辑删除的话，执行上述导出导入就可以实现数据的迁移<br>但时可能由于业务复杂，表关联复杂，导致一些数据逻辑删除后，其关联表数据还在。这样在执行原来导出时，那些逻辑删除的数据会导不出来，在执行导入时就会导致某些PK找不到数据<br>如下解决方法是再导出时，将所有数据，包括逻辑删除的数据一并导出<br>这里是修改了框架对于数据查询的代码<br>修改框架manager.py的get_queryset函数中的<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">queryset._safedelete_visibility = DELETED_VISIBLE </span><br></pre></td></tr></table></figure>
然后执行导出命令</li>
</ol>
<p>说明<br>在寻找解决方法的过程实际上是想到python manage.py dumpdata命令也是要查询数据的，万变不离其宗，他一定回去查数据表中的数据，未修改框架代码时，他默认是过滤掉了逻辑删除的数据，所以这里只要找到调用数据库查询的接口，把逻辑删除查询命令改掉就可以，经过查找就是这个了。</p>
]]></content>
  </entry>
  <entry>
    <title>PAT-1013_Battle_Over_Cities</title>
    <url>/2020/02/21/PAT-1013-Battle-Over-Cities/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805500414115840" target="_blank" rel="noopener">1013 Battle Over Cities</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>此题就是求连通域的个数<br>使用深搜，搜索几次就是几个连通域<br>注意：最后一个样例可能会超时,用C的输入输出</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> iN, iM, iK;</span><br><span class="line"><span class="keyword">bool</span> szVisited[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">bool</span> szRoute [<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> iCity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    szVisited[iCity] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> iIndex = <span class="number">0</span>; iIndex &lt; iN; iIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(szRoute[iCity][iIndex] == <span class="literal">true</span> &amp;&amp; szVisited[iIndex] == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(iIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;iN, &amp;iM, &amp;iK);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> iIndex = <span class="number">0</span>; iIndex &lt; iM; iIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> iCity1;</span><br><span class="line">        <span class="keyword">int</span> iCity2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; iCity1 &gt;&gt; iCity2;</span><br><span class="line">        szRoute[iCity1 - <span class="number">1</span>][iCity2 - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        szRoute[iCity2 - <span class="number">1</span>][iCity1 - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> iIndex = <span class="number">0</span>; iIndex &lt; iK; iIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> iCity;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iCity);</span><br><span class="line">        <span class="built_in">fill</span>(szVisited, szVisited + iN, <span class="literal">false</span>);</span><br><span class="line">        szVisited[iCity - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> iResult = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> jIndex = <span class="number">0</span>; jIndex &lt; iN; jIndex++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(szVisited[jIndex] == <span class="literal">true</span>) <span class="comment">//访问过的城市不再访问</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(jIndex);</span><br><span class="line">            iResult ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iResult - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1012_The_Best_Rank</title>
    <url>/2020/02/21/PAT-1012-The-Best-Rank/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805502658068480" target="_blank" rel="noopener">1012 The Best Rank</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题目要求给出每个学生A,C,M,E的分数,计算每个学生名次最好的科目,且4个科目的重要程度为A&gt;C&gt;M&gt;E<br>求解过程是将每科的分数单独排序,计算出每个科目分数所在的名次,并用map存下该分数的名次,然后可以直接通过学生的分数得到所在名次</p>
<p>对于A平均分排序,因为浮点数不适合做key值,所以我采用总分排名</p>
<p>注意：相同分数的名次相同,其后的名次则为累计名次</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STUDENT_GRADE</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> C;</span><br><span class="line">    <span class="keyword">int</span> M;</span><br><span class="line">    <span class="keyword">int</span> E;</span><br><span class="line">    <span class="keyword">int</span> A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b&lt;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> szTest[<span class="number">4</span>] = &#123;<span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'E'</span>, <span class="string">'A'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iN, iM;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;iN &gt;&gt;iM;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecGrade[<span class="number">4</span>]; <span class="comment">//记录每种科目的所有分数,并排序</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapGradeIndex[<span class="number">4</span>]; <span class="comment">//记录分数在该科目中的位次</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, STUDENT_GRADE&gt; mapStudentGrade; <span class="comment">//记录学生的分数</span></span><br><span class="line">    <span class="built_in">string</span> strStudentId;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iN; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> iC, iM, iE;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; strStudentId &gt;&gt; iC &gt;&gt; iM &gt;&gt; iE;</span><br><span class="line">        STUDENT_GRADE stTudentGrade;</span><br><span class="line">        stTudentGrade.C = iC;</span><br><span class="line">        stTudentGrade.M = iM;</span><br><span class="line">        stTudentGrade.E = iE;</span><br><span class="line">        stTudentGrade.A = iC + iM + iE;</span><br><span class="line">        mapStudentGrade[strStudentId] = stTudentGrade;</span><br><span class="line">        vecGrade[<span class="number">0</span>].push_back(iC);</span><br><span class="line">        vecGrade[<span class="number">1</span>].push_back(iM);</span><br><span class="line">        vecGrade[<span class="number">2</span>].push_back(iE);</span><br><span class="line">        vecGrade[<span class="number">3</span>].push_back(stTudentGrade.A);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对每个科目的分数进行排序,并计算出位次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(vecGrade[i].<span class="built_in">begin</span>(), vecGrade[i].<span class="built_in">end</span>(), cmp1); <span class="comment">//从大到小倒叙排列</span></span><br><span class="line">        <span class="keyword">int</span> iNextRank = <span class="number">1</span>; <span class="comment">//下一个名次的位次</span></span><br><span class="line">        <span class="keyword">int</span> iLastNum = <span class="number">301</span>; <span class="comment">//总分最大为300,所以这里取301</span></span><br><span class="line">        <span class="comment">//计算位次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vecGrade[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(iLastNum &gt; vecGrade[i][j]) <span class="comment">//上一名的分数大于本轮次分数,名次顺延续</span></span><br><span class="line">            &#123;</span><br><span class="line">                mapGradeIndex[i][vecGrade[i][j]] = iNextRank;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mapGradeIndex[i][vecGrade[i][j]] = mapGradeIndex[i][vecGrade[i][j]]; <span class="comment">//和上一名分数相同,则名次也相同</span></span><br><span class="line">            &#125;</span><br><span class="line">            iLastNum = vecGrade[i][j]; <span class="comment">//保留本轮分数</span></span><br><span class="line">            iNextRank ++; <span class="comment">// 记录分数位次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iM; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; strStudentId;</span><br><span class="line">        <span class="keyword">if</span>(mapStudentGrade.<span class="built_in">find</span>(strStudentId) == mapStudentGrade.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"N/A"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> iTest = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> iRank = mapGradeIndex[<span class="number">3</span>][mapStudentGrade[strStudentId].A];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(iRank &gt; mapGradeIndex[<span class="number">0</span>][mapStudentGrade[strStudentId].C])</span><br><span class="line">        &#123;</span><br><span class="line">            iRank = mapGradeIndex[<span class="number">0</span>][mapStudentGrade[strStudentId].C];</span><br><span class="line">            iTest = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(iRank &gt; mapGradeIndex[<span class="number">1</span>][mapStudentGrade[strStudentId].M])</span><br><span class="line">        &#123;</span><br><span class="line">            iRank = mapGradeIndex[<span class="number">1</span>][mapStudentGrade[strStudentId].M];</span><br><span class="line">            iTest = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(iRank &gt; mapGradeIndex[<span class="number">2</span>][mapStudentGrade[strStudentId].E])</span><br><span class="line">        &#123;</span><br><span class="line">            iRank = mapGradeIndex[<span class="number">2</span>][mapStudentGrade[strStudentId].E];</span><br><span class="line">            iTest = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; iRank &lt;&lt; <span class="string">" "</span>&lt;&lt; szTest[iTest] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>CS-多线程综述</title>
    <url>/2020/02/21/CS-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>SLAM-学习笔记</title>
    <url>/2020/02/20/SLAM-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第三讲 三维空间刚体运动<br>3.1 点，向量和坐标系，旋转矩阵</p>
<ul>
<li>表示</li>
<li>运算(加减, 内积, 外积)</li>
</ul>
<p>第三讲 三维空间的刚体运动</p>
<ul>
<li><p>两个不同的坐标系变化  T = 旋转 + 平移</p>
<p>旋转<br>设某坐标系D1(e1, e2, e3)发生一次旋转，变成了D2(e1’, e2’, e3’)</p>
<p>旋转矩阵： 1. R是一个正交矩阵 2. R的行列式为+1</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>音-一荤一素</title>
    <url>/2020/02/20/%E9%9F%B3-%E4%B8%80%E8%8D%A4%E4%B8%80%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>日出又日落 深处再深处<br>一张小方桌 有一荤一素<br>一个身影从容地忙忙碌碌<br>一双手让这时光有了温度<br>太年轻地人 他总是不满足<br>固执地不愿停下 远行的脚步<br>望着高高的天走了长长的路<br>忘了回头看 她有没有哭<br>月儿明 风儿轻<br>可是你在敲打我的窗棂<br>听到这你就别担心<br>其实我过的还可以<br>月儿明 风儿轻<br>你又可曾来过我的梦里<br>一定是你来时太小心<br>知道我睡得很轻</p>
<p>音评：<br>第一次听这首歌是在歌手上听到的，一直喜欢听毛不易的歌曲，很安静。这首歌更是听的深入我心，听的过程很有画面<br>，很多回忆涌来，不知道怎么的我就长大了，现在还能想到童年的几个片段。<br>那应该是中午刚过，我躲在鸡房那个老房子门口，那时应该是个冬天，挺冷的，没有去上学。我在门口躲风等着妈妈去集市回来。现在还能体会到当时的感觉。<br>还有一个片段是跟着妈妈去集市卖鸡蛋，忘了那时是几年级了，反正当时觉得自己挺大的。<br>现在想到这些莫名的酸楚</p>
<h2 id="网评"><a href="#网评" class="headerlink" title="网评"></a>网评</h2><p>你传的照片，是我离家时的床铺<br>你说好久了，屋子都没人住<br>我总有办法打断你的叮嘱<br>多数是不耐烦，少数是想哭</p>
<p>我总说自己要减轻你的辛苦<br>要自己去闯自己的路<br>以为自己足够光彩夺目<br>却被你一眼看穿艰辛苦楚</p>
<p>传说上帝无法亲力亲为所有的守护<br>派仙女下凡，做人间的公主<br>从此，<br>一切美好，在茶米油盐中驻足</p>
<hr>
<p>一荤配一素，一汤配一饭<br>平常日子里，不仅也不慢<br>你给我港湾，我给你期盼<br>走时抬头望天，忍住泪珠涟涟<br>忘了回头看，他人形只影单<br>远行，是孤寂的身影<br>送别，是难耐的情绪<br>他乡，是未知的故里<br>忘了有多久没回到这个港湾<br>忘了她的期盼<br>回去吧，停下远行的脚步<br>月儿正明，风儿正轻，吃一顿热腾腾的饭</p>
]]></content>
      <categories>
        <category>音</category>
      </categories>
  </entry>
  <entry>
    <title>内修-打造自己的个人品牌</title>
    <url>/2020/02/20/%E5%86%85%E4%BF%AE-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%93%81%E7%89%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="如何打造个人品牌"><a href="#如何打造个人品牌" class="headerlink" title="如何打造个人品牌"></a>如何打造个人品牌</h4><p>干好本职工作， 写作， 演讲</p>
<ul>
<li>热爱本职工作<ol>
<li>主动思考一些问题，遇到难题「我可以学」这是无穷力量。</li>
<li>把公司当作自己的事业</li>
<li>等哪天若是真跳槽了，不用多想，同事对你的背书一定是嘎嘎的棒。这都是长期积累的「馈赠」。<br><img src="%E7%8E%8B%E5%85%B4.jpg" alt="内修-打造自己的个人品牌"></li>
</ol>
</li>
<li>写作<ol>
<li>搞清写作的目的</li>
<li>写就对了，干就完了</li>
<li>积极寻求反馈，鼓励读者或朋友给建议和反馈，改正提升<br><img src="%E8%87%AA%E6%88%91%E8%AE%A4%E7%9F%A5.jpg" alt="内修-打造自己的个人品牌"></li>
</ol>
</li>
<li>演讲<ol>
<li>台上一分钟，台下十年功</li>
<li>抓住核心，不用面面俱到</li>
<li>多看一些优秀朋友的演讲</li>
<li>一定要有Q&amp;A环节，积极寻求思想的碰撞，获得更多志同道合的朋友<br><img src="%E5%AD%A6%E4%B9%A0%E9%87%91%E5%AD%97%E5%A1%94.jpg" alt="内修-打造自己的个人品牌"></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>内修</category>
      </categories>
  </entry>
  <entry>
    <title>影-海上钢琴师</title>
    <url>/2020/02/19/%E5%BD%B1-%E6%B5%B7%E4%B8%8A%E9%92%A2%E7%90%B4%E5%B8%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="%E6%B5%B7%E4%B8%8A%E9%92%A2%E7%90%B4%E5%B8%88.jpeg" alt="海上钢琴师"><br>首先表态，这影片一看就是经典影片的样子</p>
<p>看的过程有点松散，分了几段看完的，看完后在我印象中的几个片段，</p>
<ol>
<li>胖子卖小号，</li>
<li>船员爸爸捡到了1900</li>
<li>船员爸爸被铁链砸中去世</li>
<li>1900莫名开始弹钢琴还很厉害</li>
<li>大陆上的著名钢琴师前来挑战，被血虐。</li>
<li>1900遇到个女孩，还有什么关系</li>
<li>胖子来找1900</li>
<li>船炸了</li>
</ol>
<hr>
<p>关于钢琴，关于镜头，关于彼岸，关于1900</p>
<p>众人叫他天才，众人为之疯狂。1900，从拥有这个不平凡的名字起，就注定是个不平凡的人。目光，掌声和荣耀，平凡人可能终其一生都得不到的东西，对于天才的1900就像空气一样稀松平常。</p>
<p>但目光，掌声和荣耀并不能令人幸福，也不长久。电影里有一个镜头：人们围绕在1900身边为音乐起舞的时候，有人看见了自由女神，一下子所有的人呼啦啦作鸟兽散，只剩下1900孤寂的身影。再多的荣耀也挽救不了孤独，此刻他非天才，是个可怜的被遗弃者。</p>
<p>天才其实是世界上最不幸的人。所有的天才都是异类。而再体面的异类都不会被人真正地爱。那些为1900的琴声瞠目结舌的人，在琴声终结的时候，他们也就砸吧着嘴散去。1900这样天才更像个宠物。人们喜欢它，呵护它，痴迷它，但它跑到马路中间迎面驰来飞车，谁也不会扑过去用自己的身体挡住。</p>
]]></content>
      <categories>
        <category>影</category>
      </categories>
  </entry>
  <entry>
    <title>Django-查询优化方法</title>
    <url>/2020/02/19/Django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近负责的项目后台访问接口贼慢，有时候慢到没有反应的地步，经过多方排查最终把问题源头确定到数据库性性能上。<br>因为同样的数据同样的代码使用本地数据库和使用云数据库查询速度相差将近100倍。然而提升云数据库性能需要资金，资金不充裕只能从后台代码下手，这个不需要资金支持。</p>
<p>首先因为访问数据库很慢，所以尽量减少对数据库的操作。参看django框架和自己的思考主要优化方面如下:</p>
<ol>
<li><p>查询时尽量使用关联表查询，少请求服务器</p>
</li>
<li><p>使用value,value_list指明查询的字段<br>StuChoiceRes.objects.values(“choice_ans”, “score”, “is_correct”).</p>
</li>
<li><p>使用values_list查询时，若只有一个字段，则flat置为True<br>StuTaskQuestionRes.objects.values_list(“exampaper_question”, flat = True)</p>
</li>
</ol>
<p>然而经过以上操作提升的速度也并不可观,所以只能使用终极大招，缓存<br>对于需要频繁使用且数据量很大的表，在查询时去redis缓存中找，若没有找到则此时建立一个。<br>需要注意的是，使用缓存要保证缓存数据和数据表数据一致，这里采用的策略是在执行更新操作时更新相应的缓存数据</p>
<p>4.</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1054_The_Dominant_Color</title>
    <url>/2020/02/19/PAT-1054-The-Dominant-Color/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805422639136768" target="_blank" rel="noopener">1054 The Dominant Color</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>用一个值记录当前色号的数量，当收到不同于当前色号的值时则数量减1，当收到相同的色号，数量加1，当数量减为0时，则切换色号</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> iDominantColor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> iDominantColorCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> iColor;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; iColor;</span><br><span class="line">            <span class="keyword">if</span>(iDominantColorCount == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                iDominantColor = iColor;</span><br><span class="line">                iDominantColorCount = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(iDominantColor == iColor)</span><br><span class="line">                &#123;</span><br><span class="line">                    iDominantColorCount++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    iDominantColorCount--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;iDominantColor&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>PAT-1011_World_Cup_Betting</title>
    <url>/2020/02/18/PAT-1011-World-Cup-Betting/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805504927186944" target="_blank" rel="noopener">1011 World Cup Betting</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>简单</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> szGameResult[<span class="number">3</span>] = &#123;<span class="string">'W'</span>, <span class="string">'T'</span>, <span class="string">'L'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> fRadio = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> maxGameRadio = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> fGameRadio;</span><br><span class="line">        <span class="keyword">int</span> iGameRadioIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt; fGameRadio;</span><br><span class="line">            <span class="keyword">if</span>(fGameRadio &gt; maxGameRadio)</span><br><span class="line">            &#123;</span><br><span class="line">                maxGameRadio = fGameRadio;</span><br><span class="line">                iGameRadioIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; szGameResult[iGameRadioIndex] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        fRadio *= maxGameRadio;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> fBet = (fRadio * <span class="number">0.65</span> - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, fBet);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>docker-实战部署django服务器</title>
    <url>/2020/02/18/docker-%E5%AE%9E%E6%88%98%E9%83%A8%E7%BD%B2django%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="django-基本环境安装"><a href="#django-基本环境安装" class="headerlink" title="django 基本环境安装"></a>django 基本环境安装</h2><ol>
<li><p>docker pull ubuntu:18.04<br>拉一个ubuntu 18.04版本的镜像，开始使用14.04版本在django包时疯狂报错，慎用</p>
</li>
<li><p>docker run -it -p 8000:8000 ubuntu:18.04<br>使用ubuntu:18.04启动一个容器<br>其中-p 8000:8000最好在启动容器的时候指定，否则容器启动后很难修改</p>
</li>
<li><p>apt-get update<br>更新apt-get</p>
</li>
<li><p>apt-get vim<br>安装vim</p>
</li>
<li><p>apt-get install python3.6<br>安装python3.6</p>
</li>
<li><p>apt-get install python3-pip<br>安装pip3</p>
</li>
<li><p>修改pip3的源，速度会很快<br>vim ~/.pip/pip.conf  //修改pip源<br>输入以下pip源：<br>[global]<br>index-url = <a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a><br>trusted-host = pypi.douban.com<br>disable-pip-version-check = true<br>timeout = 120</p>
</li>
<li><p>ln -s /usr/bin/python3.6 python<br>给python3创建python的软连接，直接使用python命令</p>
</li>
<li><p>pip3 install django==2.2.5<br>安装2.2.5版本的django</p>
</li>
</ol>
<p>此时django环境已经初步完成可测试一下环境是否可用</p>
<h2 id="django-测试基本环境"><a href="#django-测试基本环境" class="headerlink" title="django 测试基本环境"></a>django 测试基本环境</h2><ol>
<li><p>django-admin startproject DockerDjangoTest<br>创建一个django项目</p>
</li>
<li><p>python manager.py runserver 0.0.0.0:8000<br>启动django服务</p>
</li>
</ol>
<p>此时可以使用浏览器访问””，访问到django欢迎界面就好<br>也可以使用容器的ip访问</p>
<h2 id="部署生产"><a href="#部署生产" class="headerlink" title="部署生产"></a>部署生产</h2><ol>
<li><p>apt-get install uwsgi<br>安装uwsgi</p>
</li>
<li><p>配置uwsgi文件</p>
</li>
</ol>
<p>‘’’<br>[uwsgi]<br>chdir = /home/ubuntu/qlassroom-ai/backend #后台代码路径<br>module = backend.wsgi #后台.wsgi文件 即/backend/wsgi.py<br>master = True<br>processes = 4<br>max-requests = 5000<br>harakiri = 60<br>socket = 0.0.0.0:8888  #内网ip + 端口号<br>uid = root<br>gid = root<br>pidfile = /home/ubuntu/qlassroom-ai-uwsgi/master.pid<br>daemonize = /home/ubuntu/qlassroom-ai-uwsgi/mysite.log<br>vacuum = True<br>‘’’</p>
<ol start="3">
<li><p>apt-get install nginx<br>安装nginx</p>
</li>
<li><p>配置nginx</p>
</li>
</ol>
<p>service nginx restart;<br>killall -9 uwsgi<br>uwsgi –ini /home/ubuntu/DockerDjangoTest/docker-django-test-uwsgi.ini;<br>tail -100f /var/log/nginx/access.log;</p>
<p>aws 172.31.18.194:8888</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>英-文_Growing_Neural_Cellular_Automata</title>
    <url>/2020/02/18/%E8%8B%B1-%E6%96%87-Growing-Neural-Cellular-Automata/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://distill.pub/2020/growing-ca/" target="_blank" rel="noopener">Growing Neural Cellular Automata</a><br>神经细胞自动生长机</p>
<p>Differentiable Model of Morphogenesis<br>形态变化的微分模型</p>
<p>Most multicellular organisms begin their life as a single egg cell - a single cell whose progeny reliably self-assemble into highly complex anatomies with many organs and tissues in precisely the same arrangement each time.<br>大多数多细胞有机体生命起源于一个单细胞-单细胞的后代每次都可靠的自组装成高度复杂的解剖结构,其中许多器官和机构每次都使用完全同样的组织方式。</p>
<p>The ability to build their own bodies is probably the most fundamental skill every living creature possesses.<br>构建自己的躯体或许是每个物种具有的最基本的技能</p>
<p>Morphogenesis (the process of an organism’s shape development) is one of the most striking examples of a phenomenon called self-organisation<br>形态进化(一个有机体形体发展的过程)是称为自组织现象最明显的例子</p>
<p>Cells, the tiny building blocks of bodies, communicate with their neighbors to decide the shape of organs and body plans, where to grow each organ, how to interconnect them, and when to eventually stop.<br>细胞，人体的最小组成部分，通过和相邻细胞间的交流来决定机体的形状和人体的计划，每个器官生长的位置，他们之间如何交流，什么时候停止生长。</p>
<p>Understanding the interplay of the emergence of complex outcomes from simple rules and homeostatic feedback loops is an active area of research<br>从简单的规则和稳态的反馈回路中理解复杂结果出现的交互作用是一个活跃的研究领域</p>
<p>What is clear is that evolution has learned to exploit the laws of physics and computation to implement the highly robust morphogenetic software that runs on genome-encoded cellular hardware.<br>显而易见的是进化已经学习到利用物理规律和计算力来完成运行在记忆编码细胞的硬件上高度健壮的软件</p>
<p>This process is extremely robust to perturbations.</p>
<p>Even when the organism is fully developed, some species still have the capability to repair damage - a process known as regeneration.<br>即使当有机体完全发育，某些物种仍然具有自我修复损害的能力，这个叫做复生的过程</p>
<p>Some creatures, such as salamanders, can fully regenerate vital organs, limbs, eyes, or even parts of the brain! Morphogenesis is a surprisingly adaptive process.<br>某些生物，比如salamanders，可以完全再生重要的组织，腿，眼睛，甚至是部分大脑！形态变化是一个很惊奇的适应的过程。</p>
<p>Sometimes even a very atypical development process can result in a viable organism - for example, when an early mammalian embryo is cut in two, each half will form a complete individual - monozygotic twins!<br>有时，即使一个非常不同寻常的发育过程也能产生一个活得机体。例如，当一个早期的哺乳动物被切分成两个时，每个部分都将形成一个完整的个体，单卵双胞胎</p>
]]></content>
      <categories>
        <category>英-文</category>
      </categories>
  </entry>
  <entry>
    <title>超级数学建模-几个分形函数</title>
    <url>/2020/02/17/%E8%B6%85%E7%BA%A7%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E5%87%A0%E4%B8%AA%E5%88%86%E5%BD%A2%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  两千多年来，几何学的研究主要集中在欧几里得几何上。<br>  正因为如此，欧氏几何中由直线或曲线、平面或曲面、平直体或曲体所构成的各种几何形状，一直是人类认识自然物体形状的有力工具，还是各种学科的理论基础</p>
]]></content>
      <categories>
        <category>超级数学</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1008_Elevator</title>
    <url>/2020/02/17/PAT-1008-Elevator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805511923286016" target="_blank" rel="noopener">1008 Elevator </a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>简单</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iN;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; iN;</span><br><span class="line">    <span class="keyword">int</span> iFloor;</span><br><span class="line">    <span class="keyword">int</span> iLastFloor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> iCost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; iFloor;</span><br><span class="line">        <span class="keyword">int</span> iStep = iFloor - iLastFloor;</span><br><span class="line">        <span class="keyword">if</span>(iStep &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            iCost += iStep * <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            iCost -= iStep * <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iLastFloor = iFloor;</span><br><span class="line"></span><br><span class="line">        iCost += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; iCost &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>PAT-1007_Maximum_Subsequence_Sum</title>
    <url>/2020/02/17/PAT-1007-Maximum-Subsequence-Sum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168" target="_blank" rel="noopener">1007 Maximum Subsequence Sum</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>计算每个点为终点的最大子序列和<br>maxSeqSum[i] = max(num[i], maxSeqSum[i - 1] + num[i])</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST_MAX_SUM_SEQUENCE</span>&#123;</span> <span class="comment">//记录最大子序列和</span></span><br><span class="line">    <span class="keyword">int</span> iStartIndex;</span><br><span class="line">    <span class="keyword">int</span> iEndIndex;</span><br><span class="line">    <span class="keyword">int</span> iSum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iK;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> szNum[iK];</span><br><span class="line">    ST_MAX_SUM_SEQUENCE stMaxSumSequence[iK]; <span class="comment">//记录每个位置子序列和</span></span><br><span class="line">    ST_MAX_SUM_SEQUENCE stMaxSum; <span class="comment">//记录和最大的子序列</span></span><br><span class="line">    stMaxSum.iStartIndex = <span class="number">0</span>;</span><br><span class="line">    stMaxSum.iEndIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;szNum[<span class="number">0</span>];</span><br><span class="line">    stMaxSum.iSum = szNum[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    stMaxSumSequence[<span class="number">0</span>].iStartIndex = <span class="number">0</span>;</span><br><span class="line">    stMaxSumSequence[<span class="number">0</span>].iEndIndex = <span class="number">0</span>;</span><br><span class="line">    stMaxSumSequence[<span class="number">0</span>].iSum = szNum[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; iK; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; szNum[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(szNum[i] + stMaxSumSequence[i - <span class="number">1</span>].iSum &gt;= szNum[i])</span><br><span class="line">        &#123;</span><br><span class="line">            stMaxSumSequence[i].iStartIndex = stMaxSumSequence[i - <span class="number">1</span>].iStartIndex;</span><br><span class="line">            stMaxSumSequence[i].iEndIndex = i;</span><br><span class="line">            stMaxSumSequence[i].iSum = szNum[i] + stMaxSumSequence[i - <span class="number">1</span>].iSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            stMaxSumSequence[i].iStartIndex = i;</span><br><span class="line">            stMaxSumSequence[i].iEndIndex = i;</span><br><span class="line">            stMaxSumSequence[i].iSum = szNum[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stMaxSum.iSum &lt; stMaxSumSequence[i].iSum)</span><br><span class="line">        &#123;</span><br><span class="line">            stMaxSum.iStartIndex = stMaxSumSequence[i].iStartIndex;</span><br><span class="line">            stMaxSum.iEndIndex = stMaxSumSequence[i].iEndIndex;</span><br><span class="line">            stMaxSum.iSum = stMaxSumSequence[i].iSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stMaxSum.iSum &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; szNum[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; szNum[iK - <span class="number">1</span>] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; stMaxSum.iSum &lt;&lt; <span class="string">" "</span> &lt;&lt; szNum[stMaxSum.iStartIndex] &lt;&lt; <span class="string">" "</span> &lt;&lt; szNum[stMaxSum.iEndIndex] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1006_Sign_In_and_Sign_Out</title>
    <url>/2020/02/17/PAT-1006-Sign-In-and-Sign-Out/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928" target="_blank" rel="noopener">1006 Sign In and Sign Out</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>太简单</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iM;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iM);</span><br><span class="line">    <span class="built_in">string</span> strStudentId;</span><br><span class="line">    <span class="built_in">string</span> strSignIn;</span><br><span class="line">    <span class="built_in">string</span> strSignOut;</span><br><span class="line">    <span class="built_in">string</span> strMinSignInId;</span><br><span class="line">    <span class="built_in">string</span> strMinSignInTime = <span class="string">"24:00:00"</span>;</span><br><span class="line">    <span class="built_in">string</span> strMinSignOutId;</span><br><span class="line">    <span class="built_in">string</span> strMaxSignOutTime = <span class="string">"00:00:00"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iM; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; strStudentId &gt;&gt; strSignIn &gt;&gt; strSignOut;</span><br><span class="line">        <span class="comment">//cout&lt;&lt; strMinSignInId &lt;&lt; strMinSignOutId &lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(strMinSignInTime &gt;= strSignIn)</span><br><span class="line">        &#123;</span><br><span class="line">            strMinSignInId = strStudentId;</span><br><span class="line">            strMinSignInTime = strSignIn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strMaxSignOutTime &lt;= strSignOut)</span><br><span class="line">        &#123;</span><br><span class="line">            strMinSignOutId = strStudentId;</span><br><span class="line">            strMaxSignOutTime = strSignOut;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; strMinSignInId &lt;&lt; <span class="string">" "</span> &lt;&lt; strMinSignOutId &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1005_Spell_It_Right</title>
    <url>/2020/02/17/PAT-1005-Spell-It-Right/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336" target="_blank" rel="noopener">1005 Spell It Right</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>数位求和相加</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> szIntergerToEnglish[<span class="number">10</span>] =&#123;<span class="string">"zero"</span>,<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>,<span class="string">"five"</span>,<span class="string">"six"</span>,<span class="string">"seven"</span>,<span class="string">"eight"</span>,<span class="string">"nine"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> szNum[<span class="number">101</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, szNum);</span><br><span class="line"><span class="keyword">int</span> iSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">strlen</span>(szNum); i++)</span><br><span class="line">&#123;</span><br><span class="line">    iSum += szNum[i] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> szPrintNum[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> iSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(iSum != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    szPrintNum[iSize] = iSum % <span class="number">10</span>;</span><br><span class="line">    iSum = iSum / <span class="number">10</span>;</span><br><span class="line">    iSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(iSize == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;szIntergerToEnglish[<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; szIntergerToEnglish[szPrintNum[iSize - <span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = iSize - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">" "</span> &lt;&lt; szIntergerToEnglish[szPrintNum[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1004_Counting_Leaves</title>
    <url>/2020/02/14/PAT-1004-Counting-Leaves/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>就是求解树结构的每一层的叶子节点的树木，使用宽度搜索</p>
<a id="more"></a>
<hr>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mapNodeLevel; <span class="comment">//记录节点所在层数</span></span><br><span class="line"><span class="keyword">int</span> iMaxLevel = <span class="number">0</span>; <span class="comment">//记录最大层数</span></span><br><span class="line"><span class="keyword">int</span> szNoLeafNode[<span class="number">100</span>]; <span class="comment">//记录每层没有孩子的节点数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">0</span>, M;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; mapTree;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> strRoot;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; strRoot;</span><br><span class="line">        <span class="keyword">int</span> iK;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; iK;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vecChild;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; iK; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> strChild;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt; strChild;</span><br><span class="line">            vecChild.push_back(strChild);</span><br><span class="line">        &#125;</span><br><span class="line">        mapTree[strRoot] = vecChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; queNode;</span><br><span class="line">    queNode.push(<span class="string">"01"</span>);</span><br><span class="line">    mapNodeLevel[<span class="string">"01"</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(queNode.empty() != <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> strFrontNode = queNode.front();</span><br><span class="line">        queNode.pop();</span><br><span class="line">        <span class="keyword">if</span>(mapTree[strFrontNode].<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            szNoLeafNode[mapNodeLevel[strFrontNode]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        iMaxLevel = <span class="built_in">max</span>(iMaxLevel, mapNodeLevel[strFrontNode]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mapTree[strFrontNode].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            mapNodeLevel[mapTree[strFrontNode][i]] = mapNodeLevel[strFrontNode] + <span class="number">1</span>;</span><br><span class="line">            queNode.push(mapTree[strFrontNode][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, szNoLeafNode[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= iMaxLevel; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>, szNoLeafNode[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1003_Emergency</title>
    <url>/2020/02/13/PAT-1003-Emergency/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376" target="_blank" rel="noopener">1003 Emergency</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>此题就是求解最短路径，只是在求解的过程中需要记录有几个最短路径，以及在所有最短路径中权重最大的值。<br>求解最短路径使用的是Dijkstra算法，在这道题中，需要做一下变化记录下最短路径数，和最大权重</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><figcaption><span>line_number: true</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M, C1, C2;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N &gt;&gt;M &gt;&gt;C1 &gt;&gt; C2;</span><br><span class="line">    <span class="keyword">int</span> hands[N]; <span class="comment">// 城市助手数量</span></span><br><span class="line">    <span class="keyword">int</span> roads[N][N]; <span class="comment">// 两座城市的路费</span></span><br><span class="line">    <span class="keyword">int</span> visited[N]; <span class="comment">//该城市是否已经访问</span></span><br><span class="line">    <span class="keyword">int</span> shortRoads[N]; <span class="comment">//最短路径长度</span></span><br><span class="line">    <span class="keyword">int</span> shortRoadsNum[N]; <span class="comment">//最短路径数量</span></span><br><span class="line">    <span class="keyword">int</span> maxHands[N]; <span class="comment">//到该城市最多的人数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;hands[i];</span><br><span class="line">        visited[i] = <span class="number">0</span>; <span class="comment">//初始化所有城市未访问</span></span><br><span class="line">        shortRoads[i] = <span class="number">-1</span>; <span class="comment">//初始化所有城市最短路径都不存在</span></span><br><span class="line">        shortRoadsNum[i] = <span class="number">0</span>; <span class="comment">// 初始化所有的城市最短路径数量为0</span></span><br><span class="line">        maxHands[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            roads[i][j] = <span class="number">-1</span>; <span class="comment">//初始化两座城市不可达</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c1, c2, L;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c1 &gt;&gt; c2 &gt;&gt; L;</span><br><span class="line">        roads[c1][c2] = L;</span><br><span class="line">        roads[c2][c1] = L;</span><br><span class="line">    &#125;</span><br><span class="line">    shortRoads[C1] = <span class="number">0</span>;</span><br><span class="line">    shortRoadsNum[C1] = <span class="number">1</span>;</span><br><span class="line">    maxHands[C1] = hands[C1];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nowMinRoadCity = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> nowMinRoad = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) <span class="comment">//寻找当前距离最小的节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[j] == <span class="number">0</span> &amp;&amp; shortRoads[j] != <span class="number">-1</span>)<span class="comment">//目前不可达的城市不考虑</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nowMinRoad == <span class="number">-1</span> || nowMinRoad &gt; shortRoads[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    nowMinRoad = shortRoads[j];</span><br><span class="line">                    nowMinRoadCity = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nowMinRoad == <span class="number">-1</span>) <span class="comment">//如果没找到未访问过的城市的最小路径则结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//        cout&lt;&lt;"nowMinRoadCity:" &lt;&lt; nowMinRoadCity &lt;&lt;endl;</span></span><br><span class="line">        visited[nowMinRoadCity] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) <span class="comment">//在最小节点的基础上更新路径</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[j] == <span class="number">0</span>) <span class="comment">//</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(shortRoads[j] == <span class="number">-1</span>) <span class="comment">//当前城市处于不可达的状态</span></span><br><span class="line">                &#123;</span><br><span class="line">                   <span class="keyword">if</span>(roads[nowMinRoadCity][j] != <span class="number">-1</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                       shortRoads[j] = shortRoads[nowMinRoadCity] + roads[nowMinRoadCity][j];</span><br><span class="line">                       shortRoadsNum[j] = shortRoadsNum[nowMinRoadCity] ;</span><br><span class="line">                       <span class="keyword">if</span>(maxHands[j] &lt; maxHands[nowMinRoadCity] + hands[j])</span><br><span class="line">                       &#123;</span><br><span class="line">                           maxHands[j] = maxHands[nowMinRoadCity] + hands[j];</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(roads[nowMinRoadCity][j] != <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(shortRoads[j] &gt; shortRoads[nowMinRoadCity] + roads[nowMinRoadCity][j])</span><br><span class="line">                        &#123;</span><br><span class="line">                            shortRoads[j] = shortRoads[nowMinRoadCity] + roads[nowMinRoadCity][j];</span><br><span class="line">                            shortRoadsNum[j] = shortRoadsNum[nowMinRoadCity];</span><br><span class="line">                            <span class="keyword">if</span>(maxHands[j] &lt; maxHands[nowMinRoadCity] + hands[j])</span><br><span class="line">                            &#123;</span><br><span class="line">                                maxHands[j] = maxHands[nowMinRoadCity] + hands[j];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(shortRoads[j] == shortRoads[nowMinRoadCity] + roads[nowMinRoadCity][j])</span><br><span class="line">                        &#123;</span><br><span class="line">                            shortRoadsNum[j] += shortRoadsNum[nowMinRoadCity];</span><br><span class="line">                            <span class="keyword">if</span>(maxHands[j] &lt; maxHands[nowMinRoadCity] + hands[j])</span><br><span class="line">                            &#123;</span><br><span class="line">                                maxHands[j] = maxHands[nowMinRoadCity] + hands[j];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">    <span class="comment">//                cout&lt;&lt; "shortRoads " &lt;&lt;j &lt;&lt; " " &lt;&lt;shortRoads[j]&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; shortRoadsNum[C2]&lt;&lt; <span class="string">" "</span> &lt;&lt; maxHands[C2]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>docker-镜像基础操作</title>
    <url>/2020/02/12/docker-%E9%95%9C%E5%83%8F%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol>
<li><p>列出镜像<br>docker images</p>
</li>
<li><p>查看镜像<br>docker inspect</p>
</li>
<li><p>删除镜像<br>docker rmi</p>
</li>
<li><p>查找镜像<br>docker search</p>
</li>
<li><p>拉去镜像<br>docker pull</p>
</li>
<li><p>推送镜像<br>docker push</p>
</li>
</ol>
<p>例子docker push qlassroom_ai_dev</p>
<ol start="7">
<li>构建镜像<br>docker commit</li>
</ol>
<p>利用dockerfile 构建镜像<br>docker build</p>
<ol start="8">
<li><p>dockerfile 构建镜像</p>
</li>
<li><p>docker tag 规范镜像名字<br>docker tag qlassroom_ai_dev:latest 872204778/qlassroom_dev:v1<br>qlassroom_ai_dev 为原镜像名称<br>latest: 为原镜像标签</p>
</li>
</ol>
<p>872204778： 用户名<br>qlassroom_dev：新镜像名<br>v1:新标签</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>影-肖申克的救赎</title>
    <url>/2020/02/11/%E5%BD%B1-%E8%82%96%E7%94%B3%E5%85%8B%E7%9A%84%E6%95%91%E8%B5%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="%E8%82%96%E7%94%B3%E5%85%8B%E7%9A%84%E6%95%91%E8%B5%8E.jpeg" alt="肖申克的救赎"><br>2020-02-10，大约是23:30 我看完了肖申克的救赎，总共用了两天时间，分三段看完的。<br>  看这部电影的初衷就是想看看评分如此之高，备受好评的电影是怎么做到的。经典为何为经典。<br>看的过程中并没有全身心的投入去看，因为像这种偏文艺的电影，我现在还不能做到心无旁骛的陶醉其中，然而虽然看的时候有点懈怠，但是经典的电影还是在不经意间引起我的深思。<br>  首先是主人公作为Andy作为一个在社会上有头有脸的人物，却沦为阶下囚，并受到了些凌辱。这样我想到，适应环境，利用规则，才是生存或者更好生活的的法则。狱警可以肆无忌惮的对囚徒进行殴打，因为在这个小小的“王国”下，他们就是规则的制定者。他们可以毫无理由的分配给囚徒各种工作，即使很地下的工作，在囚徒看来都可能是一种荣幸。</p>
<p>  其次是知识的作用，Andy有知识，他利用他的知识能力在狱中可以得到与其他囚徒不一样的待遇，同时他又利用他的知识能力来教化其他狱友。从某点上来考虑，这个情节很激励人心，教化自己普渡他人，这是一个自带光芒的人啊，然而转念一想，这情节有些突兀。在一个没有自由，或者说是在一个狭小的几乎会永远生活在这没有“文明”的地方，真的会有人崇尚知识吗。这就好比生活在三维世界的人，可能只是四维生物的打工仔，我们所谓的知识，只是四维生物赏赐给我们的低级的趣味。</p>
<p>  Brooks从监狱里出来之后，选择了自杀，因为他很难再适应外面世界的规则。</p>
<p>  以后再看一次</p>
<hr>
<p>下面为阅读的影评<br>肖申克的救赎与信念，自由，友谊有关。</p>
<h5 id="【信念】"><a href="#【信念】" class="headerlink" title="【信念】"></a>【信念】</h5><p>Red说，希望是危险的东西，是精神苦闷的根源。重重挤压下的牢狱里待了三十年的他的确有资格这么说。因为从进来的那一天起，狱长就说过「把灵魂交给上帝，把身体交给我」。 他除了能弄来香烟和印着裸女的扑克牌，其他任何异动在这个黑暗的高墙之内似乎都无法生长。</p>
<p>然而，Andy却告诉他，「记住，希望是好事——甚至也许是人间至善而美好的事永不消失」。</p>
<p>所以Andy能够用二十年挖开瑞德认为六百年都无法凿穿隧洞。当Andy终于排除五百码恶臭的污水管道，站在瓢泼大雨中情不自禁的时候，我们仿佛看到信念刺穿重重黑幕，在暗夜中打了一道夺目的霹雳。亮光之下，我们怯懦的灵魂在Andy张开的双臂下现行，并且颤抖。</p>
<p><em>庸常生活里的我们，似乎已经习惯了按步就按，习惯了先说「不可能」，习惯了没有奇迹，习惯了习惯了。</em></p>
<p>我们应该试着留住一些信念，在他们丧失殆尽之前。它们也许最终无法实现，也许无法让我们或者更有意义的活着，甚至对于我们自己而言，它们只会愈加给我们带来更多的虚无感。然而我知道我有多需要这样的虚伪与自欺，因为你可以说我在做梦，但我不会是仅有的一个。</p>
<h5 id="【自由】"><a href="#【自由】" class="headerlink" title="【自由】"></a>【自由】</h5><p>我到今天也不明白，那两个意大利的女人在唱什么。事实上，我也不想去明白。有些东西不说更好。我想那是非笔墨可形容的美貌，然而却令你如此心伤。</p>
<p>那声音飞扬，高远入云，超过任何在禁锢中的囚犯的梦。仿佛一只美丽的小鸟，飞入这灰色的鸟笼，让那些围墙消失，另铁窗中的所有犯人，感到一刻的自由。</p>
<p>当Andy不顾一切的在监狱的喇叭里放《费加罗的婚礼》时。正在广场上防风的囚徒们和那些狱警，它们静立当地，抛却所有愤懑，狠毒，怨恨，沐浴着从未觉得如此自由的阳光。莫扎特的乐声铺洒在这些人的身上，来自俗世的美妙音符似乎将他们都濯洗的纯净无比。</p>
<p><em>强者自救，圣者渡人。</em> 修屋顶的时候，Andy为大家争取来啤酒，事实上是为大家争取到的那种像修缮自家的屋顶一般自由的存在，所以他不喝酒，微笑却带着巨大的幸福。播放《费加罗的婚礼》也是要唤醒它们已经丧失殆尽的自由感。</p>
<p>然而强者终究是少数。自由面前，更多人选择禁锢。在监狱图书馆待了五十年的Brooks，为了不被假释，竟然想通过伤害狱友来达到留在监狱的目的。自由本就是人们向往和追求的东西。可是Brooks却早已在监狱的规则下规则了自己，没有规则，他无法生存。</p>
<p>「监狱的高墙是在是很有趣。刚入狱时，你痛恨周围的高墙；慢慢的，你习惯生活在其中，最终你会发现自己不得不依靠它来生存。这就是体制化」假Red之口，斯蒂芬金直指卑微</p>
<p>Brooks得到了身体的自由，灵魂却早已经无法挽回的体制化。他终于没有能摆脱对自由无法适应的困境，悬梁自尽。而睿智如瑞德，在出狱之后也悲哀的发现，自己竟然连撒尿都要向经理报告，否则一滴都挤不出来。他也考虑如何违规以便回到监狱，甚至考虑与Brooks一样离开。</p>
<p>要么忙着生活，要么忙着等死。步履匆匆的人们也许应该偶尔驻足，跳出来看看自己的模样。我们终会知道，<em>习惯与服从规则的人们将付出巨大的代价来习惯本来属于每一个人的自由</em></p>
<h5 id="【友谊】"><a href="#【友谊】" class="headerlink" title="【友谊】"></a>【友谊】</h5><p>Red和Andy那种置放在高墙之下的友谊，似乎比我们纷繁俗世中的友情来的更加纯粹和干净。他们都是内敛的人，然而洞悉一切，心意切合。他们终于相会在太平洋小岛的阳光沙滩上。</p>
]]></content>
      <categories>
        <category>影</category>
      </categories>
  </entry>
  <entry>
    <title>docker-基本容器操作</title>
    <url>/2020/02/11/docker-%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="容器基本操作"><a href="#容器基本操作" class="headerlink" title="容器基本操作"></a>容器基本操作</h3><ol>
<li><p>启动容器<br>docker run IMAGE [COMMAND] [ARG…]<br>例： 启动容器并输出hello world<br>docker run ubuntu echo “hello world”</p>
</li>
<li><p>启动交互式容器<br>docker run -i -t IMAGE /bin/bash<br>例：<br>docker run -i -t ubuntu /bin/bash</p>
</li>
<li><p>查看容器列表<br>docker ps</p>
</li>
<li><p>查看容器详情<br>docker inspect</p>
</li>
<li><p>重新启动已经停止的容器<br>docker start -i</p>
</li>
<li><p>删除停止的容器<br>docker rm cool_sammet</p>
</li>
<li><p>以守护形式运行容器<br>docker run -i -t IMAGE /bin/bash<br>CTRL + Q 退出</p>
</li>
<li><p>再次进入守护形式运行的容器<br>docker attach</p>
</li>
<li><p>使用run 启动守护形式容器<br>docker run -d IMAGE [COMMAND] [ARG…]<br>例：docker run –name dc1 -d ubuntu /bin/sh -c “while true; do echo hello world; sleep 1; done”</p>
</li>
<li><p>查看容器日志<br>docker logs [-f] [-t] [–tail] 容器名</p>
</li>
<li><p>查看容器的进程<br>docker top 容器名</p>
</li>
<li><p>在运行容器中启动新的进程<br>docker exec [-d][-i][-t] 容器名 [COMMAND][ARG…]<br>例：docker exec -i -t dc1 /bin/bash</p>
</li>
<li><p>停止守护容器<br>docker stop 发送信号给容器，等待其停止<br>docker kill 直接停止容器</p>
</li>
<li><p>容器保存为镜像<br>docker commit 容器名 镜像名</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-1002_A+B_for_Polynomials</title>
    <url>/2020/02/11/PAT-1002-A-B-for-Polynomials/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h2 id="1002-A-B-for-Polynomials"><a href="#1002-A-B-for-Polynomials" class="headerlink" title="1002 A+B for Polynomials"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000" target="_blank" rel="noopener">1002 A+B for Polynomials</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><h2 id="将系数相同的项累加，累加后若该项为0则删除"><a href="#将系数相同的项累加，累加后若该项为0则删除" class="headerlink" title="将系数相同的项累加，累加后若该项为0则删除"></a>将系数相同的项累加，累加后若该项为0则删除</h2><h4 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h4><ol>
<li>项为0的不输出</li>
<li>按照系数大小逆向输出</li>
</ol>
<hr>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; poly;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> poly_i = <span class="number">0</span>; poly_i &lt; <span class="number">2</span>; poly_i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">int</span> N;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">int</span> Ni;</span><br><span class="line">          <span class="keyword">double</span> aN;</span><br><span class="line">          <span class="built_in">cin</span>&gt;&gt; Ni &gt;&gt; aN;</span><br><span class="line">          <span class="keyword">if</span>(poly.<span class="built_in">find</span>(Ni) != poly.<span class="built_in">end</span>())</span><br><span class="line">          &#123;</span><br><span class="line">              poly[Ni] += aN;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">              poly[Ni] = aN;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(poly[Ni] == <span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              poly.erase(Ni); <span class="comment">// 删除项为0</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt; poly.<span class="built_in">size</span>();</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt;::reverse_iterator rit;</span><br><span class="line">  <span class="keyword">for</span>(rit = poly.rbegin(); rit != poly.rend(); rit++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>, rit-&gt;first, rit-&gt;second); <span class="comment">//保留1位小数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>tf-keras和keras</title>
    <url>/2020/02/10/tf-keras%E5%92%8Ckeras/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>keras 是什么</p>
<ul>
<li>基于python的高级神经网络API</li>
<li>以Tensorflow，CNTK或者Theano为后段运行，keras必须有后端才可以运行</li>
<li>极方便与快速实验，帮助用户以最少的时间验证自己的想法<br>Tensorflow-keras是什么<ul>
<li>Tensorflow对keras API的规范实现</li>
<li>比以Tensorflow为后段的keras，Tensorflow-keras与Tensorflow结合更加紧密</li>
<li>实现在tf.keras空间下</li>
</ul>
</li>
</ul>
<p>Tf-keras 和 keras的联系</p>
<ul>
<li>基于同一套API<ul>
<li>keras程序可以通过导入方式转换为tf.keras程序</li>
<li>反之不成立，因为tf.keras有其他特性<ul>
<li>相同的JSON和HDF5模型序列化格式和语义</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Tf-keras 和 keras的区别</p>
<ul>
<li>Tf.keras全面支持eager mode<ul>
<li>只是用keras.Sequential和keras.Model时没有影响</li>
<li>自动以的Model内部运算逻辑时没有影响<ul>
<li>Tf低层API可以使用keras的model.fit等抽象</li>
</ul>
</li>
</ul>
</li>
<li>Tf.keras支持基于tf.data的模型训练</li>
<li>Tf.keras支持TPU训练</li>
<li>Tf.keras支持tf.distribution的分布式策略</li>
<li>Tf.keras可以与Tensorflow中的estimator集成</li>
<li>Tf.keras可以保存为SaveModel</li>
</ul>
]]></content>
      <categories>
        <category>Tensorflow2.0</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习-概率分布</title>
    <url>/2020/02/10/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>疫情下的元宵节</title>
    <url>/2020/02/09/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E5%85%83%E5%AE%B5%E8%8A%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 2020年正月十五-元宵节</p>
<p> 今年春节非比寻常，在武汉瘟疫肆虐的情况下，每个人都被限制在了室内。出门都是口罩护身。往日的走街串巷，拜亲戚，聚会的习俗都被瘟疫压制了。</p>
<p> 这是2020年正月16的疫情数据。<br> <img class="epidemic_data.jpeg [width] [height] &quot;title text&quot; &quot;alt text&quot;"></p>
<p> <img src="epidemic_data.jpeg" alt="患病人数"><br> <img src="epidemic_data_map.jpeg" alt="各省统计"><br> 总确诊人数将近4万了，很恐怖的数据了。<br> 湖北，广东，浙江都已经变黑了，河南今天也变黑了。</p>
<p> <img src="we.jpeg" alt="我们"><br> 在这样的疫情下，我和他在一起过的元宵节，带着口罩背对着正月十五的月亮，在一起就很开心</p>
]]></content>
      <categories>
        <category>文</category>
      </categories>
  </entry>
  <entry>
    <title>二维码登陆原理</title>
    <url>/2020/02/09/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%99%BB%E9%99%86%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本实现原理"><a href="#基本实现原理" class="headerlink" title="基本实现原理"></a>基本实现原理</h2><ol>
<li><p>网页端和服务器配合逻辑<br>首先用户打开网站登陆界面时，向服务器发送获取登陆二维码的请求。服务器收到请求后，随机生成一个uuid，将这个id作为key值存入redis服务器，同时设置一个过期时间，过期后，用户登陆二维码需要进行刷新重新获取。</p>
<p>同时，将这个key值和本公司的验证码字符串合在一起，生成一个二维码图片，将后将二维码图片和uuid一起返回给浏览器。</p>
<p>浏览器拿到二维码和uuid后，会每隔一秒向浏览器发送一次登陆是否成功的请求。请求中携带有uuid作为当前页面的标识符。</p>
</li>
<li><p>手机端与服务器端配合逻辑<br>浏览器拿到二维码后，将二维码展示到网页上，并给用户一个提示：打开扫一扫进行登陆。</p>
<p>用户扫描二维码后，就可以得到一个验证码和一个uuid。</p>
<p>手机端访问服务器，参数中会有token，手机端服务器可以从中得到用户的userId。手机端将解析到的数据和用户token一起作为参数，向服务器发送验证登陆请求。</p>
<p>服务器收到登陆请求后，返回登陆确认信息给手机端。</p>
<p>手机端收到返回后，进行登陆确认。确认后再次返送请求，服务器拿到userId和uuid后，将用户的userId作为value存入redis</p>
</li>
<li><p>登陆确认后，浏览器逻辑</p>
</li>
</ol>
<p>浏览器每秒发送时候登陆成功的请求，确认登陆成功后，可以获取登陆用户的userId。</p>
<p>流程图如下：<br><img src="qrcode_login.jpg" alt="qrcode login"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>李文亮医生，再见</title>
    <url>/2020/02/07/%E6%9D%8E%E6%96%87%E4%BA%AE%E5%8C%BB%E7%94%9F%E5%86%8D%E8%A7%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我走了-带着一张训诫书！"><a href="#我走了-带着一张训诫书！" class="headerlink" title="我走了,带着一张训诫书！"></a>我走了,带着一张训诫书！</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=491833132&auto=1&height=66"></iframe>

<iframe src="http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=e90721dc87291f4510c03309e249411a&tvId=12381616400&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="0" allowfullscreen="true" width="100%" height="100%"></iframe>

<p>  <img src="LWL.jpg" alt="李文亮医生"><br>  天还没亮，我走了</p>
<p>  我走的时候，渡口很黑，无人相送，只有几朵雪花落在我的眼底。我一思念，它们便从我的眼眶滑落。</p>
<p>  黑夜真黑，黑的让我想不起万家灯火。我一生追求光，我自诩很明亮，但我拼尽全力，却什么都没点亮</p>
<p>  谢谢你们，昨夜冒着风雪来看我的人！谢谢你们整夜不眠，像守望亲人一样把我守望！可是脆弱人间，没有奇迹。</p>
<p>  我原本平凡而渺小，有一天我被上帝选中，托我将他的旨意转告苍生。</p>
<p>  我小心翼翼的说了，于是，有人劝我不要惊扰太平，他们说：你没看见满城繁华开得正艳吗！</p>
<p>  为了让全世界相信现世安稳，我只好守口如瓶，还用鲜红的指印保证 – 我说的话都是童话，带花冠的致命皇后从来不曾下凡作乱。</p>
<p>  就这样，天下继续熙熙攘攘，谁也不知道，巨大的悲伤即将把城门紧锁。</p>
<p>  后来，上帝大怒，山河失色，我也病了。再后来，我的家人都病了。我们就像千万片雪花一样，你一片，我一片，各自凋零。</p>
<p>  我曾以为，只待春江水暖，我和家人便能再度重相逢。到那时，我们就坐在鹅黄的油菜花田，把花儿一朵一朵的数，把日子一分一秒地过。</p>
<p>  等啊等啊，我只等来了昨夜小雪，上帝摸摸我的头，爱怜地说：乖，跟我走吧，人间不值得！</p>
<p>  我一听就泪如雨下，虽然人间苦寒，上帝温暖。但我怕过了奈何桥，偶尔回望吾乡，再也望不见一家老小。</p>
<p>  其实，我的风骨早就被拍死在一张保证书上。我继续阳光朗照地活着，歌颂生命，赞美松柏，那是因为我对这土地爱得深沉。而今，我的肉身也死了。</p>
<p>  在我成为一粒尘埃之前，我又静静地怀想了一遍故乡的黑土白云。多想回到小时候啊，风是尽情飞舞的，雪是洁白无瑕的。</p>
<p>  活着真好，可我死了。我再也无法抚摸亲人的脸庞，再也无法带孩子去看东湖春晓，再也无法陪父母去看武大的樱花，再也无法把风筝放到白云深处。</p>
<p>  我曾依稀梦见我尚未出世的孩子，他一出生就眼含热泪，在人潮人海中把我寻找。对不起，孩子！我知道你只想要一个平凡的父亲，而我却做了一个平民英雄。</p>
<p>  天快亮了，我要走了。带着一张保证书，那是我此生唯一的行囊。</p>
<p>  谢谢世间所有懂我怜我爱我的人，我知道你们都在黎明等候，等我越过山丘！可是，我太累了。</p>
<p>  此生，我不想重于泰山，也不怕轻于鸿毛。我唯一的心愿，就是希望冰雪消融之后，众生依然热爱大地，依然相信祖国。</p>
<p>  等到春雷滚滚，如果有人还想纪念我，请给我立一个小小的墓碑吧！不必伟岸，只须证明我曾来过这个世界，有名有姓，无知无畏。</p>
<p>  那么，我的墓志铭只需一句话：他为苍生说过话</p>
]]></content>
      <categories>
        <category>文</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2020/01/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol>
<li><p>模版方法 Template</p>
<ul>
<li>动机: 某项任务有稳定的整体结构，但是各个子步骤有很多改变的需求</li>
<li>定义: 定义一个操作中算法的骨架，而将一些步骤延迟到子类中，模版方法使得子类可以不改变一个算法的结构重定义该算法的特定步骤（只见树木不见森林）</li>
<li>处理思路: 利用虚函数的多态性</li>
</ul>
</li>
<li><p>策略模式 Strategy</p>
<ul>
<li>动机：在软件构件过程中，某些对象使用的算法可能多种多样，使用率小的算法也是一种性能负担</li>
<li>定义：定义一系列算法，把它们一个个封装起来，并且使它们可相互替换。策略模式使得算法可独立于使用它的客户程序而变化</li>
<li>处理方法： 利用多态性</li>
</ul>
</li>
<li><p>观察者模式 Observer/Event</p>
<ul>
<li>动机：软件构建过程中，我们需要为某些对象建立一种“通知依赖关系”，一个对象发生状态改变，所有依赖对象都将得到通知</li>
<li>定义：定义对象间一种一对多的依赖关系，以便一个对象的状态改变时，所有依赖于它的对象都得到通知和更新</li>
</ul>
</li>
<li><p>装饰模式 Decorator</p>
<ul>
<li>动机: 过度的使用继承来拓展对象的功能，由于继承为类型引入的静态特质，使得这种拓展方式缺乏灵活性，并且随着子类的增多，各种子类的组合会导致更多的子类膨胀</li>
<li>定义： 动态给一个对象增加额外的职责</li>
</ul>
</li>
<li><p>桥模式 Brige</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>technology</tag>
      </tags>
  </entry>
</search>
